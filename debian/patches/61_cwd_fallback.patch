From a7827910f8b1b317e237db3f30553752c34aba05 Mon Sep 17 00:00:00 2001
From: Martin Pitt <martinpitt@gnome.org>
Date: Tue, 14 Oct 2014 16:16:19 +0200
Subject: [PATCH] Provide fallback for reading current directory if OSC 7 fails

vte_terminal_get_current_directory_uri() fails if the user's ~/.bashrc already
defines $PROMPT_COMMAND by itself. E. g. previous versions of Debian's/Ubuntu's
bash shipped an /etc/skel/.bashrc which sets that, or the user may have added
it manually. In this case, reinstate reading the current directory from /proc,
which got removed in commit cf3cad87.

Bug: https://bugzilla.gnome.org/show_bug.cgi?id=697475
Bug-Ubuntu: https://launchpad.net/bugs/1132700
---
 src/terminal-screen.c | 66 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/src/terminal-screen.c b/src/terminal-screen.c
index ad78388..cfb7158 100644
--- a/src/terminal-screen.c
+++ b/src/terminal-screen.c
@@ -202,6 +202,63 @@ fake_dup3 (int fd, int fd2, int flags)
 
 G_DEFINE_TYPE (TerminalScreen, terminal_screen, VTE_TYPE_TERMINAL)
 
+static char *
+cwd_of_pid (int pid)
+{
+  static const char patterns[][18] = {
+    "/proc/%d/cwd",         /* Linux */
+    "/proc/%d/path/cwd",    /* Solaris >= 10 */
+  };
+  guint i;
+
+  if (pid == -1)
+    return NULL;
+
+  /* Try to get the working directory using various OS-specific mechanisms */
+  for (i = 0; i < G_N_ELEMENTS (patterns); ++i)
+    {
+      char cwd_file[64];
+      char buf[PATH_MAX + 1];
+      int len;
+
+      /* disable "format not a string literal" error, we know what we are doing */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wformat-nonliteral"
+      g_snprintf (cwd_file, sizeof (cwd_file), patterns[i], pid);
+#pragma GCC diagnostic pop
+      len = readlink (cwd_file, buf, sizeof (buf) - 1);
+
+      if (len > 0 && buf[0] == '/')
+        return g_strndup (buf, len);
+
+      /* If that didn't do it, try this hack */
+      if (len <= 0)
+        {
+          char *cwd, *working_dir = NULL;
+
+          cwd = g_get_current_dir ();
+          if (cwd != NULL)
+            {
+              /* On Solaris, readlink returns an empty string, but the
+               * link can be used as a directory, including as a target
+               * of chdir().
+               */
+              if (chdir (cwd_file) == 0)
+                {
+                  working_dir = g_get_current_dir ();
+                  (void) chdir (cwd);
+                }
+              g_free (cwd);
+            }
+
+          if (working_dir)
+            return working_dir;
+        }
+    }
+
+  return NULL;
+}
+
 static void
 free_tag_data (TagData *tagdata)
 {
@@ -1509,12 +1566,21 @@ terminal_screen_button_press (GtkWidget      *widget,
 char *
 terminal_screen_get_current_dir (TerminalScreen *screen)
 {
+  TerminalScreenPrivate *priv = screen->priv;
   const char *uri;
 
   uri = vte_terminal_get_current_directory_uri (VTE_TERMINAL (screen));
   if (uri != NULL)
     return g_filename_from_uri (uri, NULL, NULL);
 
+  if (priv->child_pid > 0) {
+    char *cwd = cwd_of_pid (priv->child_pid);
+    if (cwd != NULL) {
+      g_debug ("terminal_screen_get_current_dir: VTE current dir n/a, reading from /proc: %s", cwd);
+      return cwd;
+    }
+  }
+
   if (screen->priv->initial_working_directory)
     return g_strdup (screen->priv->initial_working_directory);
 
-- 
2.1.0

